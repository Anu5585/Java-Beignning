In a Java  : static have 3 things: Methods fields and Block
fields = Fields are variables that belong to class they represent the attributes for characteristics of an object fields can be of various types including primitive type object or array

Methods = Methods are functions associated with class they define the behavior or action that objects of class can perform methods can take parameters perform actions and return values
they play a crucial role in defining the functionality of a class.

Blocks = Blocks in Java referred to section of code enclosed with incurley braces there two main types of blocks initializer block and static block.
Another term for class attributes is fields.

final int x = 10;
The final keyword is useful when you want a variable to always store the same value, like PI (3.14159...).
The final keyword is called a "modifier". 



1. **`public class Apple {`**
   - `public`: This keyword is an access modifier. It specifies that the class `Apple` is accessible from outside its package.
   - `class`: This keyword is used to declare a class in Java.
   - `Apple`: This is the name of the class.

2. **`private String orangeColor;`**
   - `private`: This keyword is an access modifier. It specifies that the variable `orangeColor` is only accessible within the same class (`Apple`), not from other classes.
   - `String`: This is the data type of the variable. It represents a sequence of characters (text).
   - `orangeColor`: This is the name of the variable. It represents the color of the apple.

3. **`public Apple(String orangeColor) {`**
   - `public`: This keyword is an access modifier. It specifies that the constructor `Apple` is accessible from outside its package.
   - `Apple`: This is the constructor name, which matches the class name. Constructors are special methods used to initialize objects when they are created.
   - `(String orangeColor)`: This is the parameter list for the constructor. It indicates that the constructor expects a `String` argument named `orangeColor` to be passed when an `Apple` object is created.

4. **`this.orangeColor = orangeColor;`**
   - `this`: Refers to the current instance of the class (`Apple` in this case). It is used to disambiguate instance variables from local variables with the same name.
   - `.`: The dot operator is used to access the members of an object (in this case, the `orangeColor` variable).
   - `orangeColor`: Refers to the instance variable of the `Apple` class.
   - `= orangeColor`: Assigns the value of the parameter `orangeColor` passed to the constructor to the instance variable `orangeColor`.

5. **`public String getOrangeColor() {`**
   - `public`: This keyword is an access modifier. It specifies that the method `getOrangeColor` is accessible from outside its package.
   - `String`: This is the return type of the method. It indicates that the method will return a `String`.
   - `getOrangeColor`: This is the name of the method.

6. **`return orangeColor;`**
   - `return`: This keyword is used to return a value from the method.
   - `orangeColor`: Returns the value of the instance variable `orangeColor` when the `getOrangeColor` method is called.

7. **`public void setOrangeColor(String orangeColor) {`**
   - `public`: This keyword is an access modifier. It specifies that the method `setOrangeColor` is accessible from outside its package.
   - `void`: This is the return type of the method. It indicates that the method does not return any value.
   - `setOrangeColor`: This is the name of the method.
   - `(String orangeColor)`: This is the parameter list for the method. It indicates that the method expects a `String` argument named `orangeColor` to be passed.

8. **`this.orangeColor = orangeColor;`**
   - Similar to the line in the constructor, this line sets the value of the instance variable `orangeColor` to the value passed as a parameter to the `setOrangeColor` method.

I hope this breakdown helps you understand each line of the `Apple` class. Let me know if you have any specific questions!




Method execution block where methods can be executed :
Method execution = Stack
Objects live in heap 
class file execution = method area
program execution = last box

Two types one is static and other is object oriented programming which is non static
When we call system.out.println() :  it goes to stack portion


How to make objects:
eg : If we have person class then we call in main:


Person p = new person("annas")          In this line: person p = Object reference    and    new is a object   and  person (constructor) this part constructor 




What are access modifiers?
There are four access modifiers :

Public, private, protected and implicit





How field is made:					This part is filed
int i =10;
system.out.println(i);


	
How Method is make :
Main is static
eg :
Static int i =10;
 public static void main(String[] args){
system.out.println(foo(i));
}

static int foo(){    				        this part is method 
return i;
}

How Block is made : 
Public class Main{
Static{							In our code this static part is executed first because we do not have any name that's why it executed first
system.out.println("Annas")
}
}


Taking input From keyboard we have to use :
import java.util.Scanner; //importing class scanner for taking input from user
 Scanner sc = new Scanner(System.in); //Taking Input using keyboard
        String name= sc.nextLine();


28/2/24

casting = In Java casting is the process of converting a variable from one data type to another there are two types of casting implicit (automatic) and (explicit) manual.


upcasting = The objects of Child Class was given to parent classes like if we have a class A and B . Basically B is a child of A and A is a child of object.
eg: 
	There is a function in a B class and we want to acess it in a main class.
	The way we access is: 
	Object a = new B();
	sout(a.toString()) accepted due to inheritance this line is for understanding not part of code 
	A aa = (A) a;  // This is known as object reference =  object reference means  (object reference ko object reference diya )
	aa.foo(); 

downcasting =  The objects of Parent class was given to child classes .
		
In all hierarchy of casting : nechy sy uper jaa skty bcz usk parents h but uper sy nechy nai a skty 












 				Imp 
26 2 24 tak
1 = how to create class even child classes.
public class Employee {
    private String firstName;
    private String lastName;
}
public class HourlyEmployee extends Employee {
    private double hours;
    private double wage;
}


2 = We know inheritance effect on child classes .
eg:
 The class that is being inherited from is called the "parent class" or "base class," and the class that inherits from it is called the "child class" or "derived class."
Polymorphism
Access to Parent Class Members
Method Overriding
Code Reusability


3 = We also understand UML class diagram.
Unified Modeling Language (UML) class diagrams are a visual representation of the structure and relationships within a system. They provide a way to visualize the classes
and their associations in an object-oriented system.

4 = When we println the object reference : toString method is called.
If we haven't overridden toString it prints className@hascode 
eg:
Yes, that's correct. In Java (and many other object-oriented programming languages), when you use the println or concatenate an object reference with a string, 
the toString() method is implicitly called to convert the object to a string representation. If the toString() method is not overridden in the class, the default implementation 
from the Object class is used.
The default toString() implementation in the Object class returns a string in the format className@hashCode, where className is the name of the class to which the object belongs, 
and hashCode is the hexadecimal representation of the object's hash code.
public class MyClass {
    public static void main(String[] args) {
        MyClass obj = new MyClass();
        System.out.println(obj); // This will call obj.toString()
    }
}


5 = We know how to create getters and setters

6 =  super in constructor
			  In object-oriented programming, super is a keyword used to refer to the superclass (or parent class) of the current class. When used in the context of a 
When a subclass constructor is invoked, the first statement inside that constructor must be a call to the constructor of its superclass. This is done using super().
If you don't explicitly use super(), the compiler will automatically insert a call to the default (parameterless) constructor of the superclass. If the superclass doesn't have a default 
constructor, you must explicitly call one of its constructors using super(arguments).
constructor, super is often employed to invoke the superclass's constructor.


Invoking Superclass Constructor:
public class SubClass extends SuperClass {
    public SubClass() {
        super(); // This line invokes the constructor of the superclass
        // Other subclass-specific initialization code
    }
}


Parameterized Superclass Constructor:
public class SubClass extends SuperClass {
    public SubClass(int arg1, String arg2) {
        super(arg1, arg2); // Invoking parameterized constructor of the superclass
        // Other subclass-specific initialization code
    }
}
Implicit Call to Superclass Constructor:
public class SubClass extends SuperClass {
    // Compiler automatically inserts "super();" here
    // Other subclass-specific code
}


7 = 

We know few Implicits like:
a) default constructor
b) import java.lang
c) parent class being Object even if no parent is declared
d) super with no args super()

8  = Java Rule: that before child class object creation , its parent's object should be cretaed

9 = 
Object creation is with new and constructor
Static Applications:
1-Count the number of instances 
2- Singleton From a class only one object can be created  :
							A singleton is a design pattern that ensures a class has only one instance and provides a global point of access to that instance.
This pattern is useful when exactly one object is needed to coordinate actions across the system. To implement a singleton in Java, you typically follow these steps:

Private Constructor:
Make the class constructor private so that it cannot be instantiated from outside the class.
Private Static Instance Variable:

Declare a private static variable to hold the single instance of the class.
Public Static Method (Getter):

Provide a public static method that acts as a getter for the single instance. This method is responsible for creating the instance if it doesn't exist or returning the existing instance.


10 = what is the use of static ?
The static keyword in programming languages, including Java, is used to declare members (variables, methods, and nested classes) that belong to a class rather than to an instance 
of the class. Here are some common uses of the static keyword:
Static Variables (Class Variables):
Static variables are shared among all instances of a class.
They are declared using the static keyword.
They are associated with the class, not with specific instances.
They are often used for constants or values that need to be shared among all instances. : 
public class MyClass {
    // Static variable
    static int count = 0;
}

Static Methods:

Static methods belong to the class rather than a specific instance.
They are declared using the static keyword.
They can be called on the class itself, rather than on an instance of the class.
Utility methods that don't require access to instance-specific data are often declared as static.

public class MathUtils {
    // Static method
    public static int add(int a, int b) {
        return a + b;
    }
}


11= What is super and what is its usage while we use it :
							  Super is a keyword that is used to refer immediate parent class object it has heaven uses accessing super class members 
or : is a  Constructor of upper class super will always be the first time
you can use super to access members fields methods of class when they have the same name
Invoking  super class constructors : Super can be used to invoke the constructor of immediate paernt class this is useful when the subclass concept needs to call the constructor 
of its upper class
preventing method overriding: In a subClass  if a method is declared with the same signature as in the superclass using super can be used to explicity call the super classes 
version of method preventing method overriding.
In summary super is used to differentiate between members of the current  class and its immediate superclass to call the superclass's constructor and explicit invoke methods or 
axcess members of a superclass.




































										Youtube sy Basic

Java is used for mobile applications desktop applications web applications web servers and application servers games database connection and much more.
Java is similar to C and C#.


Static makes it possible for us to run these functions without creating an object of the blast

For naming convention we use PascalConvention and camelCaseConvension

public class Main {
  // Static method
  static void myStaticMethod() {
    System.out.println("Static methods can be called without creating objects");
  }

  // Public method
  public void myPublicMethod() {
    System.out.println("Public methods must be called by creating objects");
  }

  // Main method
  public static void main(String[] args) {
    myStaticMethod(); // Call the static method
    // myPublicMethod(); This would compile an error

    Main myObj = new Main(); // Create an object of Main
    myObj.myPublicMethod(); // Call the public method on the object
  }
}



Create a constructor:

// Create a Main class
public class Main {
  int x;  // Create a class attribute

  // Create a class constructor for the Main class
  public Main() {
    x = 5;  // Set the initial value for the class attribute x
  }

  public static void main(String[] args) {
    Main myObj = new Main(); // Create an object of class Main (This will call the constructor)
    System.out.println(myObj.x); // Print the value of x
  }
}

// Outputs 5


Encapsulation
The meaning of Encapsulation, is to make sure that "sensitive" data is hidden from users. To achieve this, you must:

declare class variables/attributes as private
provide public get and set methods to access and update the value of a private variable
Get and Set
You learned from the previous chapter that private variables can only be accessed within the same class (an outside class has no access to it). However, it is possible to access them if we provide public get and set methods.

The get method returns the variable value, and the set method sets the value.

Syntax for both is that they start with either get or set, followed by the name of the variable, with the first letter in upper case:
public class Person


 {
  private String name; // private = restricted access

  // Getter
  public String getName() {
    return name;
  }

  // Setter
  public void setName(String newName) {
    this.name = newName;
  }
}

public class Main {
  public static void main(String[] args) {
    Person myObj = new Person();
    myObj.name = "John";  // error
    System.out.println(myObj.name); // error 
  }
}


Why Encapsulation?
Better control of class attributes and methods
Class attributes can be made read-only (if you only use the get method), or write-only (if you only use the set method)
Flexible: the programmer can change one part of the code without affecting other parts
Increased security of data





 Java Inheritance (Subclass and Superclass)
In Java, it is possible to inherit attributes and methods from one class to another. We group the "inheritance concept" into two categories:

subclass (child) - the class that inherits from another class
superclass (parent) - the class being inherited from
To inherit from a class, use the extends keyword.

In the example below, the Car class (subclass) inherits the attributes and methods from the Vehicle class (superclass):

class Vehicle {
  protected String brand = "Ford";        // Vehicle attribute
  public void honk() {                    // Vehicle method
    System.out.println("Tuut, tuut!");
  }
}

class Car extends Vehicle {
  private String modelName = "Mustang";    // Car attribute
  public static void main(String[] args) {

    // Create a myCar object
    Car myCar = new Car();

    // Call the honk() method (from the Vehicle class) on the myCar object
    myCar.honk();

    // Display the value of the brand attribute (from the Vehicle class) and the value of the modelName from the Car class
    System.out.println(myCar.brand + " " + myCar.modelName);
  }
}




Java Polymorphism
Polymorphism means "many forms", and it occurs when we have many classes that are related to each other by inheritance.

Like we specified in the previous chapter; Inheritance lets us inherit attributes and methods from another class. Polymorphism uses those methods to perform different tasks. 
This allows us to perform a single action in different ways.

For example, think of a superclass called Animal that has a method called animalSound(). Subclasses of Animals could be Pigs, Cats, Dogs, Birds - 
And they also have their own implementation of an animal sound (the pig oinks, and the cat meows, etc.):

class Animal {
  public void animalSound() {
    System.out.println("The animal makes a sound");
  }
}

class Pig extends Animal {
  public void animalSound() {
    System.out.println("The pig says: wee wee");
  }
}

class Dog extends Animal {
  public void animalSound() {
    System.out.println("The dog says: bow wow");
  }
}

class Main {
  public static void main(String[] args) {
    Animal myAnimal = new Animal();  // Create a Animal object
    Animal myPig = new Pig();  // Create a Pig object
    Animal myDog = new Dog();  // Create a Dog object
    myAnimal.animalSound();
    myPig.animalSound();
    myDog.animalSound();
  }
}




Abstract Classes and Methods
Data abstraction is the process of hiding certain details and showing only essential information to the user.
Abstraction can be achieved with either abstract classes or interfaces (which you will learn more about in the next chapter).

The abstract keyword is a non-access modifier, used for classes and methods:

Abstract class: is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class).

Abstract method: can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from).
An abstract class can have both abstract and regular methods:


// Abstract class
abstract class Animal {
  // Abstract method (does not have a body)
  public abstract void animalSound();
  // Regular method
  public void sleep() {
    System.out.println("Zzz");
  }
}

// Subclass (inherit from Animal)
class Pig extends Animal {
  public void animalSound() {
    // The body of animalSound() is provided here
    System.out.println("The pig says: wee wee");
  }
}

class Main {
  public static void main(String[] args) {
    Pig myPig = new Pig(); // Create a Pig object
    myPig.animalSound();
    myPig.sleep();
  }
}

Why And When To Use Abstract Classes and Methods?
To achieve security - hide certain details and only show the important details of an object.



Marks to Percenage :  


import java.util.Scanner; //importing class scanner for taking input from user
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in); //Taking Input using keyboard
        System.out.println("Enter Your Name : " );
        String name= sc.nextLine();
        System.out.println("Your Name is : " + name);
        // Taking Input of Marks
        System.out.println("Enter Subject 1 Marks : ");
        int mark1 = sc.nextInt();
        System.out.println("Your 1st Subject Marks : " + mark1);
        System.out.println("Enter Subject 2 Marks : ");
        int mark2 = sc.nextInt();
        System.out.println("Your 2nd Subject Marks : " + mark2);
        System.out.println("Enter Subject 3 Marks : ");
        int mark3 = sc.nextInt();
        System.out.println("Your 3rd Subject Marks : " + mark3);
        System.out.println("Enter Subject 4 Marks : ");
        int mark4 = sc.nextInt();
        System.out.println("Your 4th Subject Marks : " + mark4);
        System.out.println("Enter Subject 5 Marks : ");
        int mark5 = sc.nextInt();
        System.out.println("Your 5th Subject Marks : " + mark5);
        int sum = mark1 + mark2 + mark3 + mark4 + mark5 ;
        int obtainedMarks = 500;
        System.out.println("Total Marks is : " + obtainedMarks );
        System.out.println("Marks You Obtained : " + sum );
        int percentage = sum *100 /obtainedMarks;
        System.out.println("Hurray! You Got : "+ percentage + "%" );
    }
}
